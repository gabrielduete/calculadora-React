{"version":3,"sources":["componentes/display/display.jsx","componentes/botoes/botoes.jsx","componentes/calculadora/Calculadora.jsx","App.js","index.js"],"names":["Display","props","className","numero1","operador","numero2","resultado","Botoes","value","onClick","e","calcula","target","Calculadora","useState","numeroDisplay1","setNumeroDisplay1","numeroDisplay2","setNumeroDisplay2","operadorClicado","setOperadorClicado","setResultado","setOperador","operador2","setOperador2","primeiroClique","setPrimeiroClique","primeiroCalculo","setPrimeiroCalculo","calculo","setCalculo","limpaValores","num","calculaDnv","primeiroNum","segundoNum","isNaN","ultimoNumero","recebeOperador","result","num1","num2","parseFloat","fazOperacao","slice","recebeValores","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cacbecaa.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nfunction Display(props){\n    return (\n        <div className = 'containerDisplay'>\n            <p className = 'numeros'>{props.numero1} {props.operador} {props.numero2}</p>\n            <p className = 'resultado'>{props.resultado}</p>\n        </div>\n    )\n}\n\nexport default Display","import React from \"react\"\nimport './style.css'\n\nimport {\n    IoBackspaceOutline, \n} from \"react-icons/io5\"\n\nfunction Botoes(props){\n\n    return(\n        <div className = 'botoes'>\n            <button value = {'backspace'} onClick = {(e) => props.calcula(e.target.value)} ><IoBackspaceOutline/></button>\n            <button value = {'C'} onClick = {(e) => props.calcula(e.target.value)}> C </button>\n            <button value = {'%'} onClick = {(e) => props.calcula(e.target.value)}> % </button>\n            <button value = {'/'} onClick = {(e) => props.calcula(e.target.value)} className = 'operador'>/</button>\n            \n            <button value = {'1'} onClick = {(e) => props.calcula(e.target.value)}> 1 </button>\n            <button value = {'2'} onClick = {(e) => props.calcula(e.target.value)}> 2 </button>\n            <button value = {'3'} onClick = {(e) => props.calcula(e.target.value)} >3 </button>\n            <button value = {'*'} onClick = {(e) => props.calcula(e.target.value)} className = 'operador' >*</button>\n\n            <button value = {'4'} onClick = {(e) => props.calcula(e.target.value)} >4</button>\n            <button value = {'5'} onClick = {(e) => props.calcula(e.target.value)}>5</button>\n            <button value = {'6'} onClick = {(e) => props.calcula(e.target.value)}>6</button>\n            <button value = {'-'} onClick = {(e) => props.calcula(e.target.value)} className = 'operador'>-</button>\n\n            <button value = {'7'} onClick = {(e) => props.calcula(e.target.value)}>7</button>\n            <button value = {'8'} onClick = {(e) => props.calcula(e.target.value)}>8</button>\n            <button value = {'9'} onClick = {(e) => props.calcula(e.target.value)}>9</button>\n            <button value = {'+'} onClick = {(e) => props.calcula(e.target.value)} className = 'operador'>+</button>\n\n            <button value = {'.'} onClick = {(e) => props.calcula(e.target.value)} >.</button>\n            <button value = {'0'} onClick = {(e) => props.calcula(e.target.value)} >0</button>\n            <button value = {'='} onClick = {(e) => props.calcula(e.target.value)} className = 'operador'>=</button>\n        </div>\n    )\n}\n\nexport default Botoes","import React, { useState } from 'react'\nimport './style.css'\n\nimport Display from '../display/display'\nimport Botoes from '../botoes/botoes'\n\nfunction Calculadora(){\n        //States para o Display\n        const [numeroDisplay1, setNumeroDisplay1] = useState('')\n        const [numeroDisplay2, setNumeroDisplay2] = useState('')\n        const [operadorClicado, setOperadorClicado] = useState('') \n        const [resultado, setResultado] = useState('')\n    \n        // States usados para verificar situações\n        const [operador, setOperador] = useState(false)\n        const [operador2, setOperador2] = useState(true)\n        const [primeiroClique, setPrimeiroClique] = useState(false)\n        const [primeiroCalculo, setPrimeiroCalculo] = useState(false)\n    \n        // State que recebe o Primeiro valor, o operador, o segundo valor e faz a operação\n        // 'ultimoNumero' é o resultado da ultima operação\n        const [calculo, setCalculo] = useState({\n            'primeiroNum': '',\n            'operador': '',\n            'segundoNum': '',\n            'ultimoNumero': ''\n        })\n\n        // Função para receber os valores pra exibir no Display e guardar no state Calculo\n        const recebeValores = (num) => {\n            if(operador === false){\n                // Esse IF vai verificar se ja tiver um resultado na tela e clicar em um número, ele vai limpar e colocar o numero digitado\n                if(primeiroCalculo){\n                    limpaValores(num, true)\n                    setPrimeiroCalculo(false)\n                }if( num === '.'){\n                    // Adicionando ponto para valor Float\n                    calculo.primeiroNum += num\n                    setNumeroDisplay1(numeroDisplay1 + num)\n                    calculo.ultimoNumero = ''\n                    }else if (num === 'backspace'){\n                    // Exclui o último valor da chave 'primeiroNum' do state calculo\n                    setCalculo({ \n                        'primeiroNum': calculo.primeiroNum.slice(0, -1),\n                        'operador': '',\n                        'segundoNum': ''\n                    })\n                    setNumeroDisplay1(numeroDisplay1)   \n                }else{ \n                    // Adiciona o numero na tela/objeto\n                    calculo.primeiroNum += num\n                    setNumeroDisplay1(numeroDisplay1 + num)\n                    calculo.ultimoNumero = ''\n                }\n            }else{\n                if (num === '.'){\n                    // Adicionando ponto para valor Float\n                    calculo.segundoNum += num\n                    setNumeroDisplay2(numeroDisplay2 + num)\n                }else if(num === 'backspace'){\n                    // Exclui o último valor da chave 'segundoNum' do state calculo e mantem os outros\n                    setCalculo({\n                        'primeiroNum': calculo.primeiroNum,\n                        'operador': calculo.operador,\n                        'segundoNum': calculo.segundoNum.slice(0, -1),\n                    })\n                }else{\n                    // Adiciona o numero na tela/objeto\n                    calculo.segundoNum += num\n                    setNumeroDisplay2(numeroDisplay2 + num)\n                }\n            }\n        }\n\n        // Função para receber o operador clicado\n        const recebeOperador = (num) => {\n            calculo['operador'] = num\n            setOperadorClicado(num)\n            setOperador(true)\n            setOperador2(false)\n    \n            // Verifica se ja houve o primeiro clique no '=', se tiver, ele vai adicionar o ultimo numero e a operação\n            // para fazer outro cálculo.\n            if(primeiroClique){\n                setCalculo({\n                'primeiroNum': calculo.ultimoNumero,\n                'operador': calculo.operador,\n                'segundoNum': '',\n                })\n                setNumeroDisplay1(calculo.ultimoNumero)\n                setNumeroDisplay2('')   \n            }\n\n            setPrimeiroClique(true)\n        }\n\n        // Função para fazer o calculo com os valores recebidos\n        const fazOperacao = (num) => {\n            // Objeto com as funções respectivas de cada tipo de operação\n            const operacoes = {\n                '+': (num1, num2) => (parseFloat(num1) + parseFloat(num2)),\n                '-': (num1, num2) => (parseFloat(num1) - parseFloat(num2)),\n                '/': (num1, num2) => (parseFloat(num1) / parseFloat(num2)),\n                '%': (num1, num2) => (parseFloat(num1) % parseFloat(num2)),\n                '*': (num1, num2) => (parseFloat(num1) * parseFloat(num2)),\n            }\n            \n            // Jogando o resultado da operação na tela\n            let result = operacoes[calculo['operador']](calculo.primeiroNum, calculo.segundoNum)\n            calculo.ultimoNumero = result\n            setResultado(result)\n\n            // Ajustando os states de verificação\n            setOperador2(true)\n            setOperador(false)\n            setPrimeiroCalculo(true)\n        }\n\n        // Função para limpar o display e valores do objeto, para a próxima operação\n        const limpaValores = (num, calculaDnv) => {\n            // Esse IF vai verificar se ja tiver um resultado na tela e clicar em um número, ele vai limpar e colocar o numero digitado\n            if(calculaDnv){ \n                setCalculo({\n                    'primeiroNum': num,\n                    'operador': calculo.operador,\n                    'segundoNum': '',  \n                })\n\n                setPrimeiroClique(false)\n                setResultado('')\n                setNumeroDisplay1('')\n                setNumeroDisplay2('')\n                setOperadorClicado('')\n            }else{\n                setCalculo({\n                    'primeiroNum': '',\n                    'operador': calculo.operador,\n                    'segundoNum': '',  \n                })\n    \n                setPrimeiroClique(false)\n                setResultado('')\n                setNumeroDisplay1('')\n                setNumeroDisplay2('')\n                setOperadorClicado('')\n            }\n        }\n        \n        // Função para mostrar mensagem de erro\n        const mostraError = () => {\n            setResultado('Error')\n        }\n     \n        // Função geral responsavel por suportar as outras funções e fazer as verificações necessárias para executar cada função de acordo com o clique do botão\n        const calcula = (num) => {\n            if (!isNaN(num) || num === '.' || num === 'backspace'){\n                recebeValores(num)\n            }else if ((num === '+' || num === '-' || num === '/' || num === '*' || num === '%') & operador2){\n                recebeOperador(num)\n            }else if(num === 'C'){\n                limpaValores()\n            }else if(num === '='){\n                if(calculo.segundoNum !== ''){\n                    fazOperacao(num)\n                }else{\n                    mostraError()\n                }\n            }\n        }\n    \n    return(\n        <section className = 'calculadora'>\n            <Display\n                resultado = {resultado} \n                numero1 = {calculo.primeiroNum}\n                numero2 = {calculo.segundoNum}\n                operador = {operadorClicado}\n            />\n            <Botoes calcula = {calcula} />\n      </section>\n    )\n}\n\nexport default Calculadora","import React from 'react'\nimport './App.css'\n\nimport Calculadora from './componentes/calculadora/Calculadora'\n\nfunction App(){\n  return(\n    <main className = 'container'>\n      <Calculadora />\n    </main>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}